#include <iostream>
#include <stdio.h>
#define MAXTAM 8
using namespace std;

class MyList {
private:
    class Cell {
    public:
        int val;
        Cell* prox;
        explicit Cell(int x=0) {
            val = x;
            prox=nullptr;
        }
    };
    void Esvazia(Cell *aux);
    void Mostra(Cell *aux);
    bool InsereNaPosicao(const int &num, const int &pos, Cell *aux, const int &atual);
    Cell *primeiro, *ultimo;
    int tam;
    bool Exclui(const int &pos, Cell *aux);
public:
    int size(){return tam;};
    void Esvazia();
    void Mostra();
    bool InsereNaPrimeira(const int &val);
    void MostraIterativo();
    bool InsereNaPosicao(const int &num, const int &pos);
    bool InsereNoFim(const int &num);
    bool Exclui(const int &pos);// IMPLEMENTAR (3)

    MyList() {
        tam=0;
        primeiro=ultimo=nullptr;
    };
    ~MyList() {
        Esvazia();
    };

};

void MyList::Esvazia() {
    Esvazia(primeiro);
    primeiro = ultimo = nullptr;
    tam=0;
}
void MyList::Esvazia(Cell *aux){
    if(aux==nullptr) return;
    Esvazia(aux->prox);
    delete aux;
}
void MyList::Mostra() {
    if(primeiro==nullptr)
        cout << endl<<"A lista esta vazia!"<<endl;
    else
        Mostra(primeiro);
}
void MyList::Mostra(Cell *aux){
    if(aux==nullptr){
        return;
    }
    cout<<aux->val<<" ";
    Mostra(aux->prox);
}
bool MyList::InsereNaPrimeira(const int &val){
    //se nao passar a posicao insere no inicio.
    if(primeiro==nullptr) {
        primeiro = new Cell(val);
        ultimo = primeiro;
        tam++;
    } else {
        Cell *aux = new Cell(val);
        aux->prox = primeiro;
        primeiro = aux;
        tam++;
    }
    return true;
}
bool MyList::InsereNaPosicao(const int &num, const int &pos){
    if(pos>tam)
        return InsereNaPosicao(num,tam+1,primeiro,0);
    else
        return InsereNaPosicao(num,pos,primeiro,0);
}

bool MyList::InsereNaPosicao(const int &num, const int &pos, Cell *aux, const int &atual) {
    if(pos!=0){
    if(pos-1==atual) {
        Cell *novo = new Cell(num);
        novo->prox = aux->prox;
        aux->prox = novo;
        tam++;
        return true;
    } else
        return InsereNaPosicao(num,pos,aux->prox,atual+1);
    }else{
        if(primeiro==nullptr) {
            primeiro = new Cell(num);
            ultimo = primeiro;
            tam++;
        } else {
            Cell *aux = new Cell(num);
            aux->prox = primeiro;
            primeiro = aux;
            tam++;
        }
        return true;
    }

}


bool MyList::InsereNoFim(const int &num){
    ultimo->prox=new Cell(num);
    ultimo=(ultimo->prox);
    tam++;
    return true;
}

bool MyList::Exclui(const int &pos){
    return Exclui(pos,primeiro);
}

bool MyList::Exclui(const int &pos, Cell *aux){
    Cell *anterior, *posterior;
    for(int i=0;i<tam;i++)
    {
        if(pos-1==i)
            anterior=aux;
        if(pos+1==i)
            posterior=aux;
        if(pos==(tam-1) and pos!=0)
            if(i==(tam-2))
            {
                ultimo=aux;
                aux->prox=nullptr;
                tam--;
                break;
            }
        aux=aux->prox;
    }

    if(pos>0 and pos<(tam-1))
    {
        anterior->prox = posterior;
        tam--;
        return true;
    }else if(pos==0)
        {
            primeiro=primeiro->prox;
            tam--;
        }

    return false;
}

void MyList::MostraIterativo() {
    cout << endl;
    if(tam==0){
        cout<<"\n nao tem nada na lista\n";
    }
    for(Cell *aux=primeiro; aux!= nullptr;aux = aux->prox) {
        if(aux!=primeiro)
            cout << ' ';
        cout<< aux->val;
    }
    cout << endl;
}

char menu() {
    char c;
    cout << "\nopcoes: " << endl;
    cout << "e: excluir" << endl;
    cout << "i: inserir" << endl;
    cout << "f: insere no fim" << endl;
    cout << "m: mostrar" << endl;
    cout << "p: insere p=0"<< endl;
    cout << "q: insere na posicao desejada"<<endl;
    cout << "s: sair"<<endl;
    cout << "\nEntre com sua opcao: ";
    cin >> ws >> c;
    return c;
}

int main() {
    MyList l;
    int pos;
    char opcao;
    opcao = menu();
    while(opcao!='s') {
        switch(opcao) {
            case 'e': // excluir de qualquer posicao
            case 'E':
                if(l.size()>0){
                    do {
                        cout<< "Entre com a posicao: [0.." <<(l.size()-1)<<"]: ";
                        cin>>ws>>pos;
                    } while(pos <0 || pos>(l.size()));
                    l.Exclui(pos);
                } else {
                    cout << "\nA lista esta vazia!";
                }
                break;
            case 'i':
            case 'I':
                int n;
                cout<< "Entre com o numero: ";
                cin>>ws>>n;
                if(!l.InsereNaPrimeira(n))
                    cout<< "Erro ao inserir, lista esta cheia!" << endl;
                break;
            case 'm':
            case 'M':
                l.Mostra();
                break;
            case 'p': // inserir na primeira posicao
            case 'P':
                int val;
                if(l.size()<MAXTAM){
                    cout<< "Entre com o numero: ";
                    cin >> ws;
                    cin >> val;
                    if(!l.InsereNaPrimeira(val)) {
                        cout<< "Erro ao inserir, lista esta cheia!" << endl;
                    }
                } else {
                    cout<< "Nao e possivel inserir pois a lista esta cheia!" << endl;
                }
                break;
            case 'q': // inserir qualquer posicao
            case 'Q':
                do {
                    cout<< "Entre com a posicao: [0.." <<l.size()<<"]: ";
                    cin>>ws>>pos;
                } while(pos <0 || pos>(l.size()));
                if(l.size()<MAXTAM){
                    cout<< "Entre com o numero: ";
                    cin >> ws;
                    cin >> val;
                    if(!l.InsereNaPosicao(val,pos)) {
                        cout<< "Erro ao inserir, lista esta cheia!" << endl;
                    }
                } else {
                    cout<< "Nao e possivel inserir pois a lista esta cheia!" << endl;
                }
                break;
            case 'f': //insere no fim
            case 'F':
                cout << "Entre com um numero: ";
                cin >> val;
                if(!l.InsereNoFim(val))
                    cout << "Erro ao inserir" << endl;
                break;
            default:
                cout<<"opcao invalida" << endl;
        }
        opcao=menu();
    }
    return 0;
}
